[0.8.5]
- The dependency on digital has been updated to 0.9.5. This adds features to RoughMath and Distributor, but doesn't change any existing code.
- EnhancedRandom.nextGaussianFloat() is new, and calls `RoughMath.normalRough(long)` by default. RoughMath's version seems to approximate the normal distribution more closely than the float-based Ziggurat algorithm in `Distributor.normalF(int)` or even the new one in `Distributor.normalF(long)`.
- LCG64Random is new, and comes with warnings **not** to use it if you want a high-quality generator! It is mostly meant for seeing where patterns in the low-order bits can affect other algorithms adversely.

[0.8.4]
- The dependency on digital has been updated to 0.9.4. This has no changes other than removing an import that couldn't succeed on RoboVM.

[0.8.3]
- [BREAKING] TraceRandom.setStreamIdentifier() incorrectly behaved differently from TraceRandom.setStream(). Now both use the strict threshold of 1, instead of how setStreamIdentifier() previously used 8 while setStream() used 1.
- MaceRandom is back in the core of the project, but deprecated now. It isn't registered unless you opt in.
- HornRandom is new, as a hash-on-counter generator that needs rather few operations to pass tests. It still needs benchmarking to know how fast it is in Java, but in C++ at least, it's quite fast.
- Mx3Random is very similar to DistinctRandom, but only uses a counter that increments by 1, instead of a huge hex constant; the mixer is more robust, which compensates.

[0.8.2]
- Update digital dependency to 0.9.2, which is a hotfix for some buggy behavior with scrambled Base objects.

[0.8.1]
- Update digital dependency to 0.9.1, which expands which types can append to `StringBuilder & Appendable` types.
- Add `getMinimumPeriod()` to EnhancedRandom, which gets the lowest known period of a properly-initialized generator.
- Also add `mainlyGeneratesInt()` to EnhancedRandom, to distinguish chiefly-32-bit-output generators from 64-bit-output ones. This is intended to be how `getMinimumPeriod()` is measured.
- Add LFSR64QuasiRandom, one of many possible full-period linear feedback shift register generators, mostly as a comparison point or something to combine with another generator to elongate the minimum period.

[0.8.0]
- Update digital dependency to 0.9.0, which lets us append EnhancedRandom and Distribution to more types than StringBuilder.
- TraceRandom is very similar to the earlier MaceRandom, but tries much harder to find a near-perfect stream.
- MaceRandom's way of finding a suitable stream appeared to find flawed values about 1/9 of the time; MaceRandom has been moved to the tests (and out of the library part), so use TraceRandom instead. It isn't clear which, if any, streams actually were flawed, but TraceRandom has the same algorithm and only changes its way of finding streams.

[0.7.0]
- Update digital dependency to 0.8.0, which requires the serialized String format to change (see README.md).
- Added ThrashRandom, which is rather fast (not #1), passes 32TB of PractRand without anomalies, and fails ICE tests.
- Added ThrooshRandom, which is almost as fast as ThrashRandom, passes 64TB of PractRand without anomalies, and passes ICE tests.

[0.6.9]
- Out of an abundance of caution, this downgrades libGDX (which should only be used in tests) to 1.13.1 .

[0.6.8]
- Add MaceRandom, which is just like AceRandom or LaceRandom but with about 16 million possible distinct streams.
- Update libGDX dependency, which is only used in tests, to 1.13.5 .

[0.6.7]
- Fix ChopRandom's GWT emulated version.

[0.6.6]
- Add Chip32Random, a 32-bit optimized generator in the vein of TrimRandom.
- Add Xoshiro160RoadroxoRandom, another 32-bit optimized generator that mixes xoshiro128 with a variable counter.

[0.6.5]
- OrbitalRandom's tag was wrong, which messed with serialization. It has been fixed.

[0.6.4]
- [SEED BREAKING, POTENTIALLY] The digital dependency is now 0.6.1, which produces different results from hashBulk() methods. If these were used to seed generators here, then the seeds won't be the same. This isn't done by default in this library.
- [DIFFERENT OUTPUT] In digital 0.6.1, the exact float output of nextGaussian() and other normal-distributed generation will be slightly different in some cases. The values should be very close, if different at all.
- OrbitalRandom is new.

[0.6.3]
- SoloRandom, Taxon32Random, PcgRXSMXSRandom are new.
- The digital dependency is now 0.5.4 .
- Probably a bunch more that I forgot...

[0.6.0]
- [LARGE, SEED BREAKING] Calling nextInt or nextSignedInt on any EnhancedRandom with two parameters now uses a different, more efficient algorithm. This also changes other bounded int generation, including in shuffling methods.
- [SEED BREAKING] FlowRandom is seeded differently now, in a way that's more consistent with other generators.
- 32-bit-native generators that were super-sourced on GWT had some issues; these are fixed. Affects Bear32Random, ChopRandom, Jsf32Random, Respite32Random, and Xoshiro128PlusRandom.
- Fix ReverseWrapper.shuffle() when it is given one parameter (an array or List).

[0.5.0]
- [SEED BREAKING, POTENTIALLY] When the EnhancedRandom object isn't specified, Distribution types, DistributedRandom, and InterpolatedRandom now default to AceRandom instead of WhiskerRandom. This happens even if a seed is specified, but only when no EnhancedRandom was provided.
- Deserializer was missing some registrations; these are where they should be now.

[0.4.3]
- Add FlowRandom to non-testing generators, since it passes PractRand testing flawlessly.
- Fix LineWobble on GWT, usually by using BitConversion.imul().
- Add trobble() to LineWobble; it's a trigonometric wobble.

[0.4.2]
- Update digital dependency to 0.4.3, which allows Juniper to be used on GWT again.

[0.4.1]
- Add Respite32Random (this is a 32-bit generator).
- Update digital dependency to 0.4.2 .

[0.4.0]
- Added PouchRandom; this is currently the fastest generator here, but has some state constraints that other generators don't require.
- Added Crand64Random.
- Added Sfc64Random.
- Added Jsf32Random (this is a 32-bit generator, unlike the others added in this release, which are 64-bit).
- Update digital dependency to 0.4.1 .

[0.3.9]
- Updated dependency on digital to 0.4.0 .
- Updated LineWobble with several new methods, such as splobble(), quobble(), and hobble().

[0.3.8]
- Updated dependency on digital to 0.3.7 .
- InterpolatedRandom is new.

[0.3.7]
- [SEED BREAKING CHANGE] Ziggurat had its outputs change in some rare cases, which should now make it more "fair." This only affects Gaussian and/or normal-distributed variables, or things that consume them.
- Added Xoshiro256MX3Random .
- Add a cipher, SpeckCipher, as a learning exercise; don't use it please!
- Add leap() to some random number generators.

[0.3.6]
- Immediately replaced by 0.3.7 .

[0.3.5]
- Updated dependency on digital to one that will work on GWT (digital 0.3.3).

[0.3.4]
- Fixed ArchivalWrapper serialization.
- Fixed Distribution.equals() in the presence of unused parameters, which are NaN.

[0.3.3]
- Fixed deserialization for ZipfianDistribution and made it use double for its alpha parameter (since it could only be set by giving a double).

[0.3.2]
- [SEED BREAKING CHANGE] AceRandom and ScruffRandom's `setSeed(long)` method now have much less correlation between the seed and the first few outputs of the generator. This does change the results of `setSeed(long)` and the constructor with one long that calls it.
- [BREAKING CHANGE] TupleQuasiRandom now uses a Weyl sequence (the same as GoldenQuasiRandom) instead of a simple counter that only adds 1. This changes all results, especially with small seeds.
- ArchivalWrapper's deserialization works now when a Base is specified.
- LongSequence.with() had a severe bug relating to resizing the backing array, which should be fixed now.

[0.3.1]
- Added ReverseWrapper, which wraps another generator and makes calls to nextLong() become calls to previousLong() and vice versa.
- Added LongSequence, KnownSequenceRandom, and ArchivalWrapper, which are all closely-related.
- Added ScruffRandom, which has 256 bits of state, a guaranteed minimum period of 2 to the 64, and is quite fast/high-quality. It does use multiplication, like WhiskerRandom.
- Added TupleQuasiRandom, which cycles through 1024 different multipliers that it applies to the upper bits of a counter. I am not sure what it might be useful for just yet.

[The Before Times]
- Lots of stuff.
