/*
 * Copyright (c) 2022-2025 See AUTHORS file.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

package com.github.tommyettinger.random.experimental;

import com.github.tommyettinger.random.EnhancedRandom;

import java.math.BigInteger;

/**
 * Uses the bijective Xor-Square-Or operation along with right xorshifts.
 */
public class Xqo2Xs2Random extends EnhancedRandom {

	/**
	 * The only state variable; can be any {@code long}.
	 */
	public long state;

	/**
	 * Creates a new Xqo2Xs2Random with a random state.
	 */
	public Xqo2Xs2Random() {
		this(EnhancedRandom.seedFromMath());
	}

	/**
	 * Creates a new Xqo2Xs2Random with the given state; all {@code long} values are permitted.
	 *
	 * @param state any {@code long} value
	 */
	public Xqo2Xs2Random(long state) {
		super(state);
		this.state = state;
	}

	@Override
	public String getTag() {
		return "X22R";
	}

	/**
	 * Returned by {@link #getMinimumPeriod()}.
	 * @see #getMinimumPeriod()
	 */
	private static final BigInteger MINIMUM_PERIOD = new BigInteger("10000000000000000", 16);

	/**
	 * 2 to the 64.
	 * @return 2 to the 64
	 */
	@Override
	public BigInteger getMinimumPeriod() {
		return MINIMUM_PERIOD;
	}

	/**
	 * This has one long state.
	 *
	 * @return 1 (one)
	 */
	@Override
	public int getStateCount () {
		return 1;
	}

	/**
	 * Gets the only state, which can be any long value.
	 *
	 * @param selection ignored; this always returns the same, only state
	 * @return the only state's exact value
	 */
	@Override
	public long getSelectedState (int selection) {
		return state;
	}

	/**
	 * Sets the only state, which can be given any long value. The selection
	 * can be anything and is ignored.
	 *
	 * @param selection ignored; this always sets the same, only state
	 * @param value     the exact value to use for the state; all longs are valid
	 */
	@Override
	public void setSelectedState (int selection, long value) {
		state = value;
	}

	/**
	 * Sets the only state, which can be given any long value; this seed value
	 * will not be altered. Equivalent to {@link #setSelectedState(int, long)}
	 * with any selection and {@code seed} passed as the {@code value}.
	 *
	 * @param seed the exact value to use for the state; all longs are valid
	 */
	@Override
	public void setSeed (long seed) {
		state = seed;
	}

	/**
	 * Gets the current state; it's already public, but I guess this could still
	 * be useful. The state can be any {@code long}.
	 *
	 * @return the current state, as a long
	 */
	public long getState () {
		return state;
	}

	/**
	 * Sets each state variable to the given {@code state}. This implementation
	 * simply sets the one state variable to {@code state}.
	 *
	 * @param state the long value to use for the state variable
	 */
	@Override
	public void setState (long state) {
		this.state = state;
	}

	@Override
	public long nextLong () {
		long x = (state -= 987654321987654321L);
		x ^= x * x | 1L;
		x ^= x >>> 31;
		x ^= x * x | 1L;
		return x ^ x >>> 31;
	}

	/**
	 * Skips the state forward or backwards by the given {@code advance}, then returns the result of {@link #nextLong()}
	 * at the same point in the sequence. If advance is 1, this is equivalent to nextLong(). If advance is 0, this
	 * returns the same {@code long} as the previous call to the generator (if it called nextLong()), and doesn't change
	 * the state. If advance is -1, this moves the state backwards and produces the {@code long} before the last one
	 * generated by nextLong(). More positive numbers move the state further ahead, and more negative numbers move the
	 * state further behind; all of these take constant time.
	 *
	 * @param advance how many steps to advance the state before generating a {@code long}
	 * @return a random {@code long} by the same algorithm as {@link #nextLong()}, using the appropriately-advanced state
	 */
	@Override
	public long skip (long advance) {
		long x = (state -= advance * 987654321987654321L);
		x ^= x * x | 1L;
		x ^= x >>> 31;
		x ^= x * x | 1L;
		return x ^ x >>> 31;
	}

	@Override
	public long previousLong () {
		long x = state;
		state += 987654321987654321L;
		x ^= x * x | 1L;
		x ^= x >>> 31;
		x ^= x * x | 1L;
		return x ^ x >>> 31;
	}

	@Override
	public int next (int bits) {
		long x = (state -= 987654321987654321L);
		x ^= x * x | 1L;
		x ^= x >>> 31;
		x ^= x * x | 1L;
		return (int)(x ^ x >>> 31) >>> (32 - bits);
	}

	@Override
	public Xqo2Xs2Random copy () {
		return new Xqo2Xs2Random(state);
	}

	@Override
	public boolean equals (Object o) {
		if (this == o)
			return true;
		if (o == null || getClass() != o.getClass())
			return false;

		Xqo2Xs2Random that = (Xqo2Xs2Random)o;

		return state == that.state;
	}

	@Override
	public String toString () {
		return "Xqo2Xs2Random{state=" + (state) + "L}";
	}
}
