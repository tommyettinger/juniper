package com.github.tommyettinger.random;

import java.util.BitSet;
import java.util.Random;

/**
 * LaserRandom was one of the first EnhancedRandom types written here, so it was tested first.
 * It also is implemented differently from other EnhancedRandom implementations, since it is meant
 * to be copy-paste-able out of the library easily.
 */
public class LaserRandomTest {
	public static void main(String[] args) {
		int upperBound = 5;
		System.out.println("Consecutive seeds:");
		System.out.println("\nRandom");
		for(int i = 0; i < 50; i++) System.out.print(new Random(i).nextInt(upperBound) + " ");
		System.out.println("\nLaserRandom");
		for(int i = 0; i < 50; i++) System.out.print(new LaserRandom(i).nextInt(upperBound) + " ");

		System.out.println("\n\nNormal usage");
		System.out.println("\nRandom");
		Random jur = new Random(10);
		for(int i = 0; i < 50; i++) System.out.print(jur.nextInt(upperBound) + " ");
		System.out.println("\nLaserRandom");
		LaserRandom lr = new LaserRandom(10);
		for(int i = 0; i < 50; i++) System.out.print(lr.nextInt(upperBound) + " ");

		System.out.println("\n\nWeird usage");
		System.out.println("\nRandom");
		jur = new Random(50);
		lr.setState(50);
		for(int i = 0; i < 50; i++) System.out.print((((jur.nextInt() & 0xFFFFFFFFL) * -2 >> 32) - (-2 >> 31)) + " ");
		System.out.println("\nLaserRandom");
		for(int i = 0; i < 50; i++) System.out.print(lr.nextSignedLong(-2L) + " ");

		System.out.println("\n\nRepeat count:");
		jur = new Random(100);
		lr.setState(100);
		int prev, count;
		prev = -1;
		count = 0;
		for (int i = upperBound * 1000; i >= 0; i--) {
			if(prev == (prev = jur.nextInt(upperBound))) ++count;
		}
		System.out.println("\nRandom: " + count);
		prev = -1;
		count = 0;
		for (int i = upperBound * 1000; i >= 0; i--) {
			if(prev == (prev = lr.nextInt(upperBound))) ++count;
		}
		System.out.println("\nLaserRandom: " + count);

		System.out.println("Generating 2 to the 35 longs, should all be 0 or -1...");
		lr = new LaserRandom(-0xC6BC279692B5C323L, -0x9E3779B97F4A7C17L);
		long res;
		for (int i = 0; i < 0x40000; i++) {
			for (int j = 0; j < 0x20000; j++) {
				if((res = lr.nextSignedLong(-1L, 1L)) > 0) {
					System.out.println("nextSignedLong(-1L, 1L) had an incorrect result: "+ res + "\nFAILURE!");
					System.out.printf("0x%016XL, 0x%016XL", lr.getStateA(), lr.getStateB());
					return;
				}
			}
		}
		System.out.println("Success!");

		System.out.println("\nChecking if all floats [0.0,1.0] can be generated by nextFloatInclusive()...");
		BitSet bits = new BitSet(0x1000001);
		bits.set(0, 0x1000001);
		LaserRandom gen = new LaserRandom(1L);
		for (int i = 0; i < 0x10000000; i++) {
			bits.clear(gen.nextInt(0x1000001));
		}
		System.out.println("Positions remaining: " + bits.cardinality());
	}
}
